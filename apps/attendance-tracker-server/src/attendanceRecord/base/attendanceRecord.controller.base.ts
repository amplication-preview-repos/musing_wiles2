/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AttendanceRecordService } from "../attendanceRecord.service";
import { AttendanceRecordCreateInput } from "./AttendanceRecordCreateInput";
import { AttendanceRecord } from "./AttendanceRecord";
import { AttendanceRecordFindManyArgs } from "./AttendanceRecordFindManyArgs";
import { AttendanceRecordWhereUniqueInput } from "./AttendanceRecordWhereUniqueInput";
import { AttendanceRecordUpdateInput } from "./AttendanceRecordUpdateInput";
import { ValidateQrCodeInput } from "../ValidateQrCodeInput";
import { GenerateQrCodeOutput } from "../GenerateQrCodeOutput";
import { ValidateQrCodeOutput } from "../ValidateQrCodeOutput";

export class AttendanceRecordControllerBase {
  constructor(protected readonly service: AttendanceRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttendanceRecord })
  async createAttendanceRecord(
    @common.Body() data: AttendanceRecordCreateInput
  ): Promise<AttendanceRecord> {
    return await this.service.createAttendanceRecord({
      data: {
        ...data,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,

        shift: data.shift
          ? {
              connect: data.shift,
            }
          : undefined,

        worker: data.worker
          ? {
              connect: data.worker,
            }
          : undefined,
      },
      select: {
        checkInTime: true,
        checkOutTime: true,
        createdAt: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        qrCode: true,
        qrCodeExpiration: true,

        shift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        worker: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AttendanceRecord] })
  @ApiNestedQuery(AttendanceRecordFindManyArgs)
  async attendanceRecords(
    @common.Req() request: Request
  ): Promise<AttendanceRecord[]> {
    const args = plainToClass(AttendanceRecordFindManyArgs, request.query);
    return this.service.attendanceRecords({
      ...args,
      select: {
        checkInTime: true,
        checkOutTime: true,
        createdAt: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        qrCode: true,
        qrCodeExpiration: true,

        shift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        worker: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttendanceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async attendanceRecord(
    @common.Param() params: AttendanceRecordWhereUniqueInput
  ): Promise<AttendanceRecord | null> {
    const result = await this.service.attendanceRecord({
      where: params,
      select: {
        checkInTime: true,
        checkOutTime: true,
        createdAt: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        qrCode: true,
        qrCodeExpiration: true,

        shift: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        worker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttendanceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAttendanceRecord(
    @common.Param() params: AttendanceRecordWhereUniqueInput,
    @common.Body() data: AttendanceRecordUpdateInput
  ): Promise<AttendanceRecord | null> {
    try {
      return await this.service.updateAttendanceRecord({
        where: params,
        data: {
          ...data,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,

          shift: data.shift
            ? {
                connect: data.shift,
              }
            : undefined,

          worker: data.worker
            ? {
                connect: data.worker,
              }
            : undefined,
        },
        select: {
          checkInTime: true,
          checkOutTime: true,
          createdAt: true,
          id: true,

          location: {
            select: {
              id: true,
            },
          },

          qrCode: true,
          qrCodeExpiration: true,

          shift: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          worker: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttendanceRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAttendanceRecord(
    @common.Param() params: AttendanceRecordWhereUniqueInput
  ): Promise<AttendanceRecord | null> {
    try {
      return await this.service.deleteAttendanceRecord({
        where: params,
        select: {
          checkInTime: true,
          checkOutTime: true,
          createdAt: true,
          id: true,

          location: {
            select: {
              id: true,
            },
          },

          qrCode: true,
          qrCodeExpiration: true,

          shift: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          worker: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/generate-qr-code")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateQrCode(
    @common.Body()
    body: ValidateQrCodeInput
  ): Promise<string> {
    return this.service.GenerateQrCode(body);
  }

  @common.Post("/generate-qr-action")
  @swagger.ApiOkResponse({
    type: GenerateQrCodeOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateQrCodeAction(
    @common.Body()
    body: ValidateQrCodeInput
  ): Promise<GenerateQrCodeOutput> {
    return this.service.GenerateQrCodeAction(body);
  }

  @common.Get("/:id/validate-qr-code")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ValidateQrCode(
    @common.Body()
    body: ValidateQrCodeInput
  ): Promise<string> {
    return this.service.ValidateQrCode(body);
  }

  @common.Post("/validate-qr-action")
  @swagger.ApiOkResponse({
    type: ValidateQrCodeOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ValidateQrCodeAction(
    @common.Body()
    body: ValidateQrCodeInput
  ): Promise<ValidateQrCodeOutput> {
    return this.service.ValidateQrCodeAction(body);
  }
}
