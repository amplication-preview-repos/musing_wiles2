/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AttendanceRecord as PrismaAttendanceRecord,
  Location as PrismaLocation,
  Shift as PrismaShift,
  Worker as PrismaWorker,
} from "@prisma/client";

import { GenerateQrCodeInput } from "../GenerateQrCodeInput";
import { GenerateQrCodeOutput } from "../GenerateQrCodeOutput";
import { ValidateQrCodeInput } from "../ValidateQrCodeInput";
import { ValidateQrCodeOutput } from "../ValidateQrCodeOutput";

export class AttendanceRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AttendanceRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.attendanceRecord.count(args);
  }

  async attendanceRecords<T extends Prisma.AttendanceRecordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceRecordFindManyArgs>
  ): Promise<PrismaAttendanceRecord[]> {
    return this.prisma.attendanceRecord.findMany<Prisma.AttendanceRecordFindManyArgs>(
      args
    );
  }
  async attendanceRecord<T extends Prisma.AttendanceRecordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceRecordFindUniqueArgs>
  ): Promise<PrismaAttendanceRecord | null> {
    return this.prisma.attendanceRecord.findUnique(args);
  }
  async createAttendanceRecord<T extends Prisma.AttendanceRecordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceRecordCreateArgs>
  ): Promise<PrismaAttendanceRecord> {
    return this.prisma.attendanceRecord.create<T>(args);
  }
  async updateAttendanceRecord<T extends Prisma.AttendanceRecordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceRecordUpdateArgs>
  ): Promise<PrismaAttendanceRecord> {
    return this.prisma.attendanceRecord.update<T>(args);
  }
  async deleteAttendanceRecord<T extends Prisma.AttendanceRecordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AttendanceRecordDeleteArgs>
  ): Promise<PrismaAttendanceRecord> {
    return this.prisma.attendanceRecord.delete(args);
  }

  async getLocation(parentId: string): Promise<PrismaLocation | null> {
    return this.prisma.attendanceRecord
      .findUnique({
        where: { id: parentId },
      })
      .location();
  }

  async getShift(parentId: string): Promise<PrismaShift | null> {
    return this.prisma.attendanceRecord
      .findUnique({
        where: { id: parentId },
      })
      .shift();
  }

  async getWorker(parentId: string): Promise<PrismaWorker | null> {
    return this.prisma.attendanceRecord
      .findUnique({
        where: { id: parentId },
      })
      .worker();
  }
  async GenerateQrCode(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GenerateQrCodeAction(
    args: GenerateQrCodeInput
  ): Promise<GenerateQrCodeOutput> {
    throw new Error("Not implemented");
  }
  async ValidateQrCode(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ValidateQrCodeAction(
    args: ValidateQrCodeInput
  ): Promise<ValidateQrCodeOutput> {
    throw new Error("Not implemented");
  }
}
