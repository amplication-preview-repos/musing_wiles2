/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Shift as PrismaShift,
  AttendanceRecord as PrismaAttendanceRecord,
} from "@prisma/client";

export class ShiftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShiftCountArgs, "select">): Promise<number> {
    return this.prisma.shift.count(args);
  }

  async shifts<T extends Prisma.ShiftFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShiftFindManyArgs>
  ): Promise<PrismaShift[]> {
    return this.prisma.shift.findMany<Prisma.ShiftFindManyArgs>(args);
  }
  async shift<T extends Prisma.ShiftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShiftFindUniqueArgs>
  ): Promise<PrismaShift | null> {
    return this.prisma.shift.findUnique(args);
  }
  async createShift<T extends Prisma.ShiftCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShiftCreateArgs>
  ): Promise<PrismaShift> {
    return this.prisma.shift.create<T>(args);
  }
  async updateShift<T extends Prisma.ShiftUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShiftUpdateArgs>
  ): Promise<PrismaShift> {
    return this.prisma.shift.update<T>(args);
  }
  async deleteShift<T extends Prisma.ShiftDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShiftDeleteArgs>
  ): Promise<PrismaShift> {
    return this.prisma.shift.delete(args);
  }

  async findAttendanceRecords(
    parentId: string,
    args: Prisma.AttendanceRecordFindManyArgs
  ): Promise<PrismaAttendanceRecord[]> {
    return this.prisma.shift
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendanceRecords(args);
  }
}
